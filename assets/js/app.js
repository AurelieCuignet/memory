const app = {
    cards: [], // tableau contenant toutes les cartes utilis√©es pour le jeu courant
    nbPairs: 7, // nombre de paires utilis√©es (peut √™tre modifi√© pour une difficult√© diff√©rente)
    timer: 10000, // temps de jeu en millisecondes (modifiable en fonction de la difficult√©)
    cardOne: null,
    cardTwo: null,
    foundPairs: 0, // paires trouv√©es pendant la partie
    cardTimeoutId: null,
    nbRounds: 0, // cette variable n'est qu'informative (non stock√©e en BDD), elle pourrait √™tre utilis√©e pour d√©partager des scores identiques pour la m√™me difficult√©
    username: '', 
    startTime: null, // heure de d√©marrage de la partie
    timerId: null,

    init: function() {
        console.log('initialisation');

        // on cr√©e les listeners sur les boutons
        const beforeGameForm = document.querySelector('#settings form.form');
        beforeGameForm.addEventListener('submit', app.handleSubmit);
         
    },

    handleSubmit: function(event) {
        // on bloque le comportement par d√©faut du formulaire, pour √©viter le rechargement de la page
        event.preventDefault();
    
        // on r√©cup√®re les infos fournies (username et difficulty)
        const userInput = document.querySelector('#username').value;
        const difficulty = document.querySelector('#difficulty').value; 

        // Le pseudo √©tant un champ de saisie, cela n√©cessite des v√©rifications de s√©curit√© ! (pour √©viter les failles XSS et injections SQL par exemple )
        // ici, on limite les caract√®res utilisables pour un pseudo √† l'aide d'une expression r√©guli√®re
        const regex = new RegExp('^[a-zA-Z0-9]{3,20}$'); // lettres minuscules et majuscules, chiffres, entre 3 et 20 caract√®res
        
        if(regex.test(userInput)){
            // la fonction test renvoie true si la cha√Æne test√©e correspond au pattern, false sinon
            // on peut donc lancer le jeu
            app.initData(userInput, difficulty);
                
        } else {
            alert(`Peux-tu v√©rifier ton petit nom avant de commencer s'il te pla√Æt ? üôè\nUniquement majuscules et minuscules non accentu√©es et chiffres, entre 3 et 20 caract√®res. Merci üòä`);
        }
        
    },

    initData: function(username, difficulty) {
        // on r√©initialise les propri√©t√©s du module, au cas o√π on relance une partie
        app.cards.length = 0; // on vide le tableau de cartes
        document.querySelector('#board').innerHTML = ""; //on vide le plateau de jeu
        app.cardOne = null;
        app.cardTwo = null;
        app.foundPairs = 0;
        app.cardTimeoutId = null;
        app.gameTimeoutId = null,
        app.nbRounds = 0;

        app.difficulty = difficulty;
        app.username = username;

        // on change la largeur de la zone de jeu en fonction de la difficult√©
        // pour avoir un rectangle parfait
        const boardSection = document.querySelector('#board');

        switch (difficulty) {
            // timer en millisecondes
            // ultra facile (mode test)
            case "1":
                app.timer = 10000;
                app.nbPairs = 3;
                boardSection.style.maxWidth = "350px";
                break;
            // facile
            case "2":
                app.timer = 90000;
                app.nbPairs = 10;
                boardSection.style.maxWidth = "650px";
                break;
            // difficile
            case "4":
                app.timer = 60000;
                app.nbPairs = 18;
                boardSection.style.maxWidth = "700px";
                break;
            // cauchemar
            case "5":
                app.timer = 10000;
                app.nbPairs = 7;
                boardSection.style.maxWidth = "850px";
                break;
            // difficult√© normale / par d√©faut
            case "3":
            default:
                app.difficulty = "3";
                app.timer = 90000;
                app.nbPairs = 14;
                boardSection.style.maxWidth = "850px";
        }
        
        // on cache le formulaire d'avant jeu
        document.querySelector('#settings').style.display = 'none';

        // on affiche le plateau de jeu et le timer
        document.querySelector('#board').style.display = 'flex';
        document.querySelector('#timer').style.display = 'block';
        // tout est pr√™t, on peut lancer la partie
        app.startGame();
    },

    startGame: function() {
        app.createCards();
        app.drawBoard();
        app.startTimer(app.timer);
    },

    createCards: function() {
        let isPaired = false; // vaudra true quand on aura cr√©√© dans le tableau de cartes une 2e carte avec le m√™me motif
        let patternIndex = 0; // index du motif de la carte dans la bande cards.png (de 0 √† 17 dans notre cas)
        
        // Remplissage du tableau de cartes
        // la condition de sortie n'utilise pas l'index de boucle mais compare l'index du pattern au nombre de paires souhait√©es (si 14 paires, on a besoin des patterns de 0 √† 13)
        for (let i = 0; patternIndex < app.nbPairs; i++) {
    
            // on ajoute la carte au tableau
            //app.cards.push({pattern:patternIndex, card: `card${i}`});
            app.cards.push(patternIndex);
        
            // si on vient de compl√©ter une paire (= cr√©√© une 2e carte avec le m√™me motif), isPaired vaut true
            if (isPaired) { 
                // alors on passe au motif suivant
                patternIndex++;
            } 
            // dans tous les cas, on met √† jour l'info de paire
            isPaired = !isPaired;
        }

        // lorsque toutes les cartes sont cr√©√©es, on les m√©lange
        utils.shuffleArray(app.cards);
    },

    drawBoard: function() {
        // on r√©cup√®re le div qui contiendra les cartes
        const boardSection = document.querySelector('#board');
        // on parcourt le tableau des cartes pour les ajouter une par une au plateau
        for (let card = 0 ; card < app.cards.length ; card++) {
            // pour chaque carte, on appelle la fonction qui ajoute le noeud au DOM
            app.drawCard(boardSection, card);
        }
        // quand toutes les cartes sont en place, on place un √©couteur sur le plateau
        boardSection.addEventListener('mousedown', app.handleBoardClick);
    },

    drawCard: function(board, card) {
        // on duplique le template dans le HTML pour cr√©er la carte
        const cardDiv = document.querySelector("#newCard").content.cloneNode(true);
        const newCardNode = cardDiv.firstElementChild; // pour r√©cup√©rer le div et pas le DocumentFragment
        // on met √† jour l'attribut data-index, qui servira √† r√©cup√©rer dans le tableau de cartes le motif correspondant
        newCardNode.dataset.index = card;
        
        // on ajoute le noeud au DOM
        board.appendChild(newCardNode);
    },

    handleBoardClick: function(evt) {
        // l'√©couteur d'√©v√©nement est plac√© sur l'√©l√©ment #board
        // pour r√©cup√©rer la carte cliqu√©e, on utilise evt.target
        // si on utilisait evt.currentTarget, on r√©cup√®rerait l'√©l√©ment #board
        const clickedCard = evt.target;
        
        if (clickedCard.dataset.active === "1") {
            // on v√©rifie d'abord qu'il n'y a pas un timeout en cours (si 2 cartes diff√©rentes s√©lectionn√©es sont en attente d'√™tre masqu√©es)
            // s'il y a un timeout, on force l'ex√©cution de la fonction reinitCards() avant de poursuivre
            if (app.cardTimeoutId) {
                clearTimeout(app.cardTimeoutId);
                app.reinitCards();
            }
            // si la carte est "active", elle peut √™tre s√©lectionn√©e, on poursuit
            
            // on peut calculer la position de l'image d'arri√®re-plan en fonction de la position du motif dans celle-ci
            // on  d√©cale donc l'image de background pour afficher le motif correspond au data-index de la carte
            // En utilisant une notation de cha√Æne entre backticks ``, on peut utiliser des template literals : 
            // ce qui se trouve √† l'int√©rieur du ${...} est interpr√©t√© et ce qui se trouve √† l'ext√©rieur est affich√© tel quel
            // cela permet de faire des op√©rations directement au sein d'une cha√Æne √† afficher (on s'affranchit d'une variable interm√©diaire), 
            // et √ßa √©vite de devoir √©chapper les apostrophes ou les guillemets !
            clickedCard.style.backgroundPositionY = `${app.cards[clickedCard.dataset.index] * -100}px`;

            // en notation "classique", cela donnerait :
            /* const bgPosition = app.cards[clickedCard.dataset.index] * -100;
            clickedCard.style.backgroundPositionY = bgPosition + 'px'; */

            // on  passe la carte en inactif
            clickedCard.dataset.active = "0";

            app.addCardToSelection(clickedCard);
        } else {
            // on arrive dans le else quand on clique sur une carte d'une paire d√©j√† trouv√©e,
            // ou quand on clique... entre les cartes üòÖ
            console.log('%c------- CARTE INACTIVE', 'color: crimson; font-size: 15px');
        }

    },

    addCardToSelection: function(clickedCard) {
        // si le premier slot est vide, cela signifie que le joueur n'avait pas encore s√©lectionn√© de carte
        // on met la carte dans le premier slot et on ne fait rien de plus
        if (!app.cardOne) {
            app.cardOne = clickedCard;
        } else {
            // nous sommes dans le cas o√π le joueur s√©lectionne sa 2e carte. Il faut donc ensuite faire les v√©rifications
            app.cardTwo = clickedCard;
            app.checkPair();
        }
    },

    checkPair: function() {
        // on met √† jour le compteur de tours
        app.nbRounds++;
        utils.displayMessage(`Coups jou√©s : ${app.nbRounds}`);
        // si les deux cartes ont le m√™me motif, alors une paire a √©t√© trouv√©e !
        if(app.cards[app.cardOne.dataset.index] === app.cards[app.cardTwo.dataset.index]) {
            // on laisse les deux cartes face visible
            // on ajoute un point au compteur global (foundPairs)
            app.foundPairs++;
            // on vide les deux slots de s√©lection
            app.cardOne = null;
            app.cardTwo = null;

            // on v√©rifie si le jeu est termin√© 
            if(app.foundPairs == app.nbPairs) {
                // si (compteur == nbPairs) alors la partie est gagn√©e
                app.gameEnding('victory');
            }
                // sinon on laisse le joueur poursuivre
        }
            
        // sinon, les deux cartes sont diff√©rentes
        else {
            // le setTimeout permet de laisser les cartes affich√©es, le temps d'√™tre m√©moris√©es (mais pas trop longtemps quand m√™me)
            app.cardTimeoutId = setTimeout(app.reinitCards, 1000);
        }      
    },

     /**
     * Cette fonction g√®re la fin de jeu et la possibilit√© de red√©marrer une partie
     * @param {String} result  "victory" ou "defeat"
     */
      gameEnding: function(result) {
        
        // si victoire
        if(result === 'victory') {
            // on affiche le temps, le nombre de coups, les f√©licitations du jury    
            // on r√©cup√®re le temps de jeu en soustrayant l'heure actuelle √† l'heure stock√©e en d√©but de partie
            // on obtient une dur√©e en millisecondes
            const gameDuration =  Date.now() - app.startTime;
            
            // le timerId contient une valeur tant que le temps n'est pas √©coul√©, on l'utilise pour arr√™ter le chrono
            if(app.timerId) clearInterval(app.timerId);
            
            // gameDuration sera stock√© en BDD pour afficher ensuite les high scores. 
            // On le stocke sous sa forme de millisecondes, pour pouvoir faire un tri lors de la requ√™te √† la BDD
            //todo save score in BDD
            
            // et on formatera le r√©sultat pour l'affichage comme ci-dessous
            utils.displayMessage(`Partie termin√©e en  <b>${utils.toMinutesAndSeconds(gameDuration)}</b> (${app.nbRounds} coups jou√©s)`);
            alert(`Gagn√© ! Bravo ${app.username} ü•≥`);

        } else {
             // si d√©faite, on affiche un message Perdu
            utils.displayMessage(`Zut, plus de temps... üòï <br>On r√©essaye ? üòÅ`);
            // on enregistre le score en BDD, en utilisant le timer d√©fini au d√©but, la fonction setInterval() n'√©tant pas hyper pr√©cise...
            // mais finalement, est-ce bien utile d'enregistrer les d√©faites ? ü§î
            //todo save score in BDD
        }

        //dans tous les cas       
        // on d√©sactive le plateau de jeu (retrait de l'√©couteur) pour ne pas pouvoir continuer la partie apr√®s la fin du temps
        document.querySelector('#board').removeEventListener('mousedown', app.handleBoardClick);

    },

    /**
     * Cette fonction r√©initialise les deux cartes s√©lectionn√©es si elles ne sont pas identiques.
     * @param {Element} card1 
     * @param {Element} card2 
     */
    reinitCards: function() {
        // il faut vider l'id du setTimeout, car cette fonction reinitCards() peut √™tre appel√©e avant que setTimeout() se termine de lui-m√™me
        app.cardTimeoutId = null;
        // on les retourne face cach√©e (en modifiant la position du background)
        app.cardOne.style.backgroundPositionY = "100px";
        app.cardTwo.style.backgroundPositionY = "100px";
        // on "r√©active" l'event en r√©activant la carte (data-active repasse √† 1)
        app.cardOne.dataset.active = "1";
        app.cardTwo.dataset.active = "1";

        // enfin, on vide les deux slots de s√©lection
        app.cardOne = null;
        app.cardTwo = null;
    },

    startTimer: async function(timer) {
        app.startTime = Date.now()
        app.fillProgressBar(timer);
    },

    fillProgressBar: function(timer) {
        // On calcule un taux de rafraichissement bas√© sur le timer, pour que la progression de la barre ne soit pas trop saccad√©e
        timer = timer/10;

        // on r√©cup√®re le div qui sert √† remplir la barre de progression, et on va modifier sa largeur en fonction du temps qui passe
        const timerBar = document.querySelector('#timer > .progressbar > .filler');
        let width = 0; //largeur initiale du div de remplissage
        let delta; // va stocker la diff√©rence entre l'heure actuelle et l'heure √† laquelle la partie a d√©marr√©
        app.timerId = setInterval(updateBar, 10); // setInterval() permet d'√©x√©cuter du code de mani√®re r√©currente, ici toutes les 10 ms
        function updateBar() {
            if (delta >= timer) {
                // lorsque la diff√©rence entre la date de d√©but et la date actuelle est √©gale au temps choisi pour la partie, on met fin √† setInterval()
                clearInterval(app.timerId);
                app.gameEnding('defeat');
                alert('Owwwwww üò≠');       
            } else {
                delta = Math.floor((Date.now() - app.startTime)/10);
                width = delta*100/timer;
                if (width > 100) width = 100; // sert √† √©viter que la barre ne d√©passe les 100%
                timerBar.style.width = `${width}%`;
            }
        }
    }
}

document.addEventListener('DOMContentLoaded', app.init);